!function(e){var n={};function t(o){if(n[o])return n[o].exports;var r=n[o]={i:o,l:!1,exports:{}};return e[o].call(r.exports,r,r.exports,t),r.l=!0,r.exports}t.m=e,t.c=n,t.d=function(e,n,o){t.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:o})},t.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t.t=function(e,n){if(1&n&&(e=t(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(t.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var r in e)t.d(o,r,function(n){return e[n]}.bind(null,r));return o},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},t.p="",t(t.s="./src/userIconStateToggle.js")}({"./src/userIconStateToggle.js":function(module,exports){eval("/**\n * User Icon State Toggle\n * Check user login status and update the URL for user icon accordingly\n *\n * Notes: Account tool use it's own implementation for user icon toggle,\n * because this script wouldn't load if `header` is requested by JavaScript.\n */\nconst userIconStateToggle = {\n  toggleOnHref: '/account/settings',\n  toggleOffHref: '/account/sign-in',\n};\n\nuserIconStateToggle.getCookie = (name) => {\n  const cookieArray = `; ${document.cookie}`.match(`;\\\\s*${name}=([^;]+)`);\n  return cookieArray ? cookieArray[1] : '';\n};\n\nuserIconStateToggle.getLoginState = () => {\n  const southParkUsername = userIconStateToggle.getCookie('southpark_username');\n  const authSuiteAuthorized = localStorage.getItem('auth-suite-isAuthorized') || false;\n\n  if ((southParkUsername !== '' && southParkUsername !== 'Anonymous') || authSuiteAuthorized) {\n    return true;\n  }\n\n  return false;\n};\n\nuserIconStateToggle.setUserIconState = () => {\n  const { toggleOnHref, toggleOffHref, userIcons, getLoginState } = userIconStateToggle;\n\n  if (!userIcons[0] || !userIcons[0].parentNode || !userIcons[0].parentNode.href) return;\n\n  const { host, protocol } = new URL(userIcons[0].parentNode.href);\n  const userIconUrl = `${protocol}//${host}`;\n\n  userIcons.forEach((icon) => {\n    const userIconParent = icon.parentNode;\n    const currentHref = userIconParent.href;\n\n    if (getLoginState() && !currentHref.includes(toggleOnHref)) {\n      userIconParent.href = `${userIconUrl}${toggleOnHref}`;\n      document.querySelectorAll(\"a[href='/account']\")[0].href = `${userIconUrl}${toggleOnHref}`;\n    } else if (!currentHref.includes(toggleOffHref)) {\n      userIconParent.href = `${userIconUrl}${toggleOffHref}`;\n    }\n  });\n};\n\nuserIconStateToggle.findUserIcon = setInterval(() => {\n  userIconStateToggle.userIcons = document.querySelectorAll('header [data-icon-name=\"User\"]');\n\n  if (userIconStateToggle.userIcons.length > 1) {\n    userIconStateToggle.userIcons = [userIconStateToggle.userIcons[1]];\n  }\n\n  if (userIconStateToggle.userIcons.length !== 0) {\n    userIconStateToggle.setUserIconState();\n    clearInterval(userIconStateToggle.findUserIcon);\n  }\n}, 100);\n\n\n\ndocument.addEventListener('DOMContentLoaded', function() {\n  function updateReleaseCountdown() {\n\n    const span = document.querySelector('span[data-display-name=\"GlobalMessageBar\"]');\n    if (!span) {\n      return;\n    }\n\n    // Calculate the difference in days to March 26\n    const today = new Date();\n    const targetDate = new Date(today.getFullYear(), 2, 26); // March 26\n    const diffTime = targetDate - today;\n    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n\n\n    // Find and update the text node\n    function updateTextNode(node) {\n      const searchText = \"SOUTH PARK SNOW DAY! WILL BE RELEASED ON MARCH 26TH\";\n      if (node.nodeType === 3 && node.nodeValue.includes(searchText)) {\n\n        // Update the text node with the countdown\n        node.nodeValue = node.nodeValue.replace(\"ON MARCH 26TH\", `IN ${diffDays} DAYS`);\n        return true; // Text node updated\n      }\n      for (let child of node.childNodes) {\n        if (updateTextNode(child)) return true; // Stop searching once the text is updated\n      }\n      return false; // Text node not found or updated\n    }\n\n\n\n    // Find and update the text node\n    function updateTextNodeLAT(node) {\n      console.log(\"LAT\")\n      const searchText = \"SOUTH PARK SNOW DAY! A LA VENTA EL 26 DE MARZO DE 2024\";\n      if (node.nodeType === 3 && node.nodeValue.includes(searchText)) {\n\n        // Update the text node with the countdown\n        node.nodeValue = node.nodeValue.replace(\"A LA VENTA EL 26 DE MARZO DE 2024\", `A LA VENTA EN ${diffDays} DÍAS`);\n        return true; // Text node updated\n      }\n      for (let child of node.childNodes) {\n        if (updateTextNodeLAT(child)) return true; // Stop searching once the text is updated\n      }\n      return false; // Text node not found or updated\n    }\n\n\n    // Find and update the text node\n    function updateTextNodePT(node) {\n      const searchText = \"SOUTH PARK SNOW DAY! DISPONÍVEL EM 26 DE MARÇO DE 2024\";\n      if (node.nodeType === 3 && node.nodeValue.includes(searchText)) {\n\n        // Update the text node with the countdown\n        node.nodeValue = node.nodeValue.replace(\"DISPONÍVEL EM 26 DE MARÇO DE 2024\", `DISPONÍVEL EM ${diffDays} DIAS`);\n        return true; // Text node updated\n      }\n      for (let child of node.childNodes) {\n        if (updateTextNodePT(child)) return true; // Stop searching once the text is updated\n      }\n      return false; // Text node not found or updated\n    }\n\n  \n    // Find and update the text node\n    function updateTextNodeDE(node) {\n      const searchText = \"SOUTH PARK SNOW DAY! ERSCHEINT AM 26 MÄRZ 2024\";\n      if (node.nodeType === 3 && node.nodeValue.includes(searchText)) {\n\n        // Update the text node with the countdown\n        node.nodeValue = node.nodeValue.replace(\"ERSCHEINT AM 26 MÄRZ 2024\", `ERSCHEINT ${diffDays} TAGEN`);\n        return true; // Text node updated\n      }\n      for (let child of node.childNodes) {\n        if (updateTextNodeDE(child)) return true; // Stop searching once the text is updated\n      }\n      return false; // Text node not found or updated\n    }\n\n    updateTextNode(span);\n    updateTextNodeLAT(span);\n    updateTextNodePT(span);\n    updateTextNodeDE(span);\n  }\n  \n  updateReleaseCountdown();\n});\n\n\n//# sourceURL=webpack:///./src/userIconStateToggle.js?")}});